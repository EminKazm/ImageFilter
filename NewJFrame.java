/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package imagefilter;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;

import java.awt.image.BufferedImage;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;

import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

import javax.swing.JFileChooser;
import javax.swing.JRadioButton;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author USER
 */
public class NewJFrame extends javax.swing.JFrame {
    
    BufferedImage img = null;
    private File currentFile=null;
    BufferedImage tempImg = null;
    BufferedImage img2 = null;

    
   
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        
         try{
        UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
        }catch(Exception ignored){
        
        }
    }
    @Override
    public void paint(Graphics g){
        super.paint(g);
        
        if(img!=null){

        g.drawImage(img, 0, 60,840,720, null);;
    }}

    public int checkColorRange(int newColor){
    if(newColor > 255){
        newColor = 255;
    } else if (newColor < 0) {
        newColor = 0;
    }
    return newColor;
    }
    
    private void reset(){
        for(int x=0;x<tempImg.getWidth();x++){
            for(int y=0;y<tempImg.getHeight();y++){
                int pixel = tempImg.getRGB(x, y);
                int red=(pixel >> 16 ) & 0x0ff;
                int green=(pixel >> 8 ) & 0x0ff;
                int blue=(pixel) & 0x0ff;
                img.setRGB(x,y,new Color(red,green,blue).getRGB());
            }
        }
    }
    public void brightness(int br){
        for(int x = 0; x < img.getWidth(); ++x){
            for(int y = 0; y < img.getHeight(); ++y){
                int pixel = img2.getRGB(x,y);
                int red = (pixel >> 16) & 0x0ff;
                int green = (pixel >> 8) & 0x0ff;
                int blue = (pixel) & 0x0ff;
                int nred = checkColorRange(red + br);
                int ngreen = checkColorRange(green + br);
                int nblue = checkColorRange(blue + br);
                img.setRGB(x, y, new Color(nred,ngreen,nblue).getRGB());
            }
        }
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        imageView = new javax.swing.JPanel();
        buttonPanel = new javax.swing.JPanel();
        rgb = new javax.swing.JRadioButton();
        gbr = new javax.swing.JRadioButton();
        rbg = new javax.swing.JRadioButton();
        bgr = new javax.swing.JRadioButton();
        grb = new javax.swing.JRadioButton();
        brg = new javax.swing.JRadioButton();
        swapChannel = new javax.swing.JCheckBox();
        monochrom = new javax.swing.JCheckBox();
        blur = new javax.swing.JCheckBox();
        horizontal = new javax.swing.JCheckBox();
        vertical = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        Brightness = new javax.swing.JSlider();
        red1 = new javax.swing.JSlider();
        green1 = new javax.swing.JSlider();
        cancel = new javax.swing.JButton();
        save = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        blue1 = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        grayscale = new javax.swing.JCheckBox();
        dimmer = new javax.swing.JCheckBox();
        reset = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        Open = new javax.swing.JMenuItem();
        Saveas = new javax.swing.JMenuItem();
        edit = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout imageViewLayout = new javax.swing.GroupLayout(imageView);
        imageView.setLayout(imageViewLayout);
        imageViewLayout.setHorizontalGroup(
            imageViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 838, Short.MAX_VALUE)
        );
        imageViewLayout.setVerticalGroup(
            imageViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 697, Short.MAX_VALUE)
        );

        getContentPane().add(imageView, java.awt.BorderLayout.WEST);

        buttonPanel.setBackground(new java.awt.Color(255, 255, 255));

        buttonGroup1.add(rgb);
        rgb.setText("RGB");
        rgb.setEnabled(false);
        rgb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rgbActionPerformed(evt);
            }
        });

        buttonGroup1.add(gbr);
        gbr.setText("GBR");
        gbr.setEnabled(false);
        gbr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gbrActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbg);
        rbg.setText("RBG");
        rbg.setEnabled(false);
        rbg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbgActionPerformed(evt);
            }
        });

        buttonGroup1.add(bgr);
        bgr.setText("BGR");
        bgr.setEnabled(false);
        bgr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bgrActionPerformed(evt);
            }
        });

        buttonGroup1.add(grb);
        grb.setText("GRB");
        grb.setEnabled(false);
        grb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grbActionPerformed(evt);
            }
        });

        buttonGroup1.add(brg);
        brg.setText("BRG");
        brg.setEnabled(false);
        brg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brgActionPerformed(evt);
            }
        });

        buttonGroup1.add(swapChannel);
        swapChannel.setText("Channels Swap");
        swapChannel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                swapChannelActionPerformed(evt);
            }
        });

        monochrom.setText("Monochrom");
        monochrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monochromActionPerformed(evt);
            }
        });

        blur.setText("Blur");
        blur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blurActionPerformed(evt);
            }
        });

        horizontal.setText("Horizontal Filter");
        horizontal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horizontalActionPerformed(evt);
            }
        });

        vertical.setText("Vertical filter");
        vertical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verticalActionPerformed(evt);
            }
        });

        Brightness.setMinimum(-100);
        Brightness.setValue(0);
        Brightness.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Brightness.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                BrightnessStateChanged(evt);
            }
        });
        Brightness.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BrightnessMouseClicked(evt);
            }
        });

        red1.setMajorTickSpacing(51);
        red1.setMaximum(255);
        red1.setValue(127);
        red1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                red1StateChanged(evt);
            }
        });
        red1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                red1MouseClicked(evt);
            }
        });

        green1.setMajorTickSpacing(51);
        green1.setMaximum(255);
        green1.setValue(127);
        green1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                green1StateChanged(evt);
            }
        });

        cancel.setText("cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        save.setText("save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        jLabel1.setText("Brightness");

        jLabel2.setBackground(new java.awt.Color(204, 0, 51));
        jLabel2.setForeground(new java.awt.Color(255, 0, 51));
        jLabel2.setText("Red");

        jLabel4.setForeground(new java.awt.Color(0, 204, 51));
        jLabel4.setText("Green");

        blue1.setMajorTickSpacing(51);
        blue1.setMaximum(255);
        blue1.setToolTipText("");
        blue1.setValue(127);
        blue1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                blue1StateChanged(evt);
            }
        });

        jLabel5.setForeground(new java.awt.Color(0, 51, 255));
        jLabel5.setText("Blue");

        grayscale.setText("grayscale");
        grayscale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grayscaleActionPerformed(evt);
            }
        });

        dimmer.setText("dimmer");
        dimmer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dimmerActionPerformed(evt);
            }
        });

        reset.setText("reset");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cancel)
                .addGap(18, 18, 18)
                .addComponent(reset)
                .addGap(18, 18, 18)
                .addComponent(save)
                .addGap(77, 77, 77))
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buttonPanelLayout.createSequentialGroup()
                        .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4)
                            .addComponent(green1, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                            .addComponent(jLabel5)
                            .addComponent(blue1, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                            .addComponent(red1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                        .addComponent(jLabel3))
                    .addComponent(Brightness, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buttonPanelLayout.createSequentialGroup()
                        .addComponent(swapChannel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(buttonPanelLayout.createSequentialGroup()
                        .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(rgb, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gbr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bgr, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(47, 47, 47)
                        .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(grb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(brg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(54, 54, 54))
                    .addGroup(buttonPanelLayout.createSequentialGroup()
                        .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dimmer)
                            .addComponent(vertical)
                            .addComponent(horizontal)
                            .addComponent(blur)
                            .addComponent(monochrom)
                            .addComponent(grayscale))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(swapChannel)
                .addGap(18, 18, 18)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rgb)
                    .addComponent(rbg)
                    .addComponent(grb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gbr)
                    .addComponent(bgr)
                    .addComponent(brg))
                .addGap(12, 12, 12)
                .addComponent(dimmer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(monochrom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(grayscale)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(blur)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(horizontal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vertical)
                .addGap(48, 48, 48)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Brightness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(red1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(green1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(blue1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 181, Short.MAX_VALUE)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancel)
                    .addComponent(save)
                    .addComponent(reset))
                .addContainerGap())
        );

        getContentPane().add(buttonPanel, java.awt.BorderLayout.EAST);

        File.setText("File");

        Open.setText("open");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        File.add(Open);

        Saveas.setText("save as");
        Saveas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveasActionPerformed(evt);
            }
        });
        File.add(Saveas);

        jMenuBar1.add(File);

        edit.setText("Edit");
        jMenuBar1.add(edit);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
        // TODO add your handling code here:
        
        JFileChooser chooser=new JFileChooser();
        File dirFile =new File("C:\\Users\\USER\\Desktop");
        FileNameExtensionFilter filter=new FileNameExtensionFilter("Image Files","jpg","png","gif","jpeg");
        chooser.setFileFilter(filter);
        
        chooser.setCurrentDirectory(dirFile);
        
        int returnVal=chooser.showOpenDialog(this);
        if(returnVal==JFileChooser.APPROVE_OPTION){
            try{
                BufferedImage image=ImageIO.read(chooser.getSelectedFile());
                 img2=ImageIO.read(chooser.getSelectedFile());
                
                int imageSize=1;
                tempImg=img2;
                
                int w=(int)(((double)image.getWidth())*imageSize);
                int h=(int)(((double)image.getHeight())*imageSize);
                this.img=image ;
            } catch (IOException e) {
                e.printStackTrace();
                
            }
            repaint();
            System.out.println("done");
        }
        

    }//GEN-LAST:event_OpenActionPerformed

    private void SaveasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveasActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser=new JFileChooser();
        chooser.setDialogTitle("Specify a file to save");
        chooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter=new FileNameExtensionFilter("Image Files","jpg","png","gif");
        chooser.addChoosableFileFilter(filter);
        int act=chooser.showOpenDialog(this);
        if(act==JFileChooser.APPROVE_OPTION){
           File fileToSave=chooser.getSelectedFile();
           currentFile=fileToSave;
        try{
            ImageIO.write(img, "png",fileToSave);
        }catch(IOException ex){
            System.out.println("unsuccess");
        }
        }
        
    }//GEN-LAST:event_SaveasActionPerformed

    private void brgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brgActionPerformed
        // TODO add your handling code here:
    Graphics2D g = (Graphics2D) this.getGraphics() ;
    repaint();
    syntImg8(g);
    }//GEN-LAST:event_brgActionPerformed

    private void rgbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rgbActionPerformed
        // TODO add your handling code here:
    Graphics2D g = (Graphics2D) this.getGraphics() ;
    repaint();
    syntImg6(g);
    
    }//GEN-LAST:event_rgbActionPerformed

    private void monochromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monochromActionPerformed

        // TODO add your handling code here:
        
    if(monochrom.isSelected()){   
    Graphics2D g = (Graphics2D) this.getGraphics() ;
    repaint();
    syntImg2(g);
    } else{
           System.out.println("reseted");
           reset();
           repaint();
        }
    }//GEN-LAST:event_monochromActionPerformed

    private void swapChannelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_swapChannelActionPerformed
        // TODO add your handling code here:
        JRadioButton[] buttons = new JRadioButton[]{rgb,bgr,rbg,gbr,grb,brg};
        if(swapChannel.isSelected()){
            for (JRadioButton btn : buttons) {btn.setEnabled(true);}
        }else if(swapChannel
                .isSelected()==false){
            for (JRadioButton btn : buttons) {btn.setEnabled(false);}
        }
    }//GEN-LAST:event_swapChannelActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_cancelActionPerformed

    private void grayscaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grayscaleActionPerformed
        // TODO add your handling code here:
    if(grayscale.isSelected()){
    Graphics2D g = (Graphics2D) this.getGraphics() ;
    repaint();
    syntImg(g);
    }
     else{
           System.out.println("reseted");
           reset();
           repaint();
        }
    }//GEN-LAST:event_grayscaleActionPerformed
   
    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        File file = new File("C:\\Users\\USER\\Desktop\\filteredImage.jpg");

                try {
                    ImageIO.write(img,"jpg",file);
                    System.out.println("image saved");
                } catch (IOException ex) {
                    System.out.println("image couldnt saved");
                }
    }//GEN-LAST:event_saveActionPerformed

    private void dimmerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dimmerActionPerformed
        // TODO add your handling code here:
        if(dimmer.isSelected()){
            for(int x=0;x<img.getWidth();x++){
            for(int y=0;y<img.getHeight();y++){
                Color c=new Color(img.getRGB(x,y));
                int factor= -50;
                int red=c.getRed()+factor;
                if (red >= 256) {red = 255;}else if (red < 0) {red = 0;}
                int green=c.getGreen()+factor;
                if (green >= 256) {green = 255;}else if (green < 0) {green = 0;}
                int blue=c.getBlue()+factor;
                if (blue >= 256) {blue = 255;}else if (blue < 0) {blue = 0;}
                img.setRGB(x,y,new Color(red,green,blue).getRGB());
                repaint();
            }
        }
        }else if (dimmer.isSelected()==false){
            for(int x=0;x<img.getWidth();x++){
            for(int y=0;y<img.getHeight();y++){
                Color c=new Color(img.getRGB(x,y));
                int factor=50;
                int red=c.getRed()+factor;
                if (red >= 256) {red = 255;}else if (red < 0) {red = 0;}
                int green=c.getGreen()+factor;
                if (green >= 256) {green = 255;}else if (green < 0) {green = 0;}
                int blue=c.getBlue()+factor;
                if (blue >= 256) {blue = 255;}else if (blue < 0) {blue = 0;}
                img.setRGB(x,y,new Color(red,green,blue).getRGB());
                repaint();
            }
        }
        }
        
    }//GEN-LAST:event_dimmerActionPerformed

    private void red1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_red1MouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_red1MouseClicked

    private void BrightnessMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BrightnessMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_BrightnessMouseClicked

    private void BrightnessStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_BrightnessStateChanged
        // TODO add your handling code here:
     brightness(Brightness.getValue());
        repaint();
    }//GEN-LAST:event_BrightnessStateChanged

    private void horizontalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horizontalActionPerformed
        // TODO add your handling code here:
       int c=3;
        if(horizontal.isSelected()){
       
            for(int y=0;y<img.getHeight()-1;y++){
            for(int x=0;x<img.getWidth();x++){
                int t=img.getRGB(x,y);
                int b=img.getRGB(x,y+1);
                
              
                int red=(t >> 16 ) & 0x0ff;
                int green=(t >> 8 ) & 0x0ff;
                int blue=(t) & 0x0ff;
                Color col=new Color(red,green,blue);
                int red1=(b >> 16 ) & 0x0ff;
                int green1=(b >> 8 ) & 0x0ff;
                int blue1=(b) & 0x0ff;
                Color col2=new Color(red1,green1,blue1);
                int a=(col.getRed()+col.getGreen()+col.getBlue())/3;
                int d=(col2.getRed()+col2.getGreen()+col2.getBlue())/3;
                
                if(Math.abs(a-d)<c){
                    img.setRGB(x,y,Color.WHITE.getRGB());
                }else{
                    img.setRGB(x,y,Color.BLACK.getRGB());
                }
            }
            repaint();
        }
       }
       else{
           System.out.println("reseted");
           reset();
           repaint();
       }
    }//GEN-LAST:event_horizontalActionPerformed

    private void verticalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verticalActionPerformed
        // TODO add your handling code here:
        int c=3;
        if(vertical.isSelected()){
        for(int x=0;x<img.getWidth()-1;x++){
            for(int y=0;y<img.getHeight();y++){
                int a=img.getRGB(x,y);
                int b=img.getRGB(x+1,y);
                
              
                int red=(a >> 16 ) & 0x0ff;
                int green=(a >> 8 ) & 0x0ff;
                int blue=(a) & 0x0ff;
                Color col=new Color(red,green,blue);
                int red2=(b >> 16 ) & 0x0ff;
                int green2=(b >> 8 ) & 0x0ff;
                int blue2=(b) & 0x0ff;
                Color col2=new Color(red2,green2,blue2);
                int k=(col.getRed()+col.getGreen()+col.getBlue())/3;
                int l=(col2.getRed()+col2.getGreen()+col2.getBlue())/3;
                
                if(Math.abs(k-l)<c){
                    img.setRGB(x,y,Color.WHITE.getRGB());
                }else{
                    img.setRGB(x,y,Color.BLACK.getRGB());
                }
            }
            repaint();
        }
        }
        else{
           System.out.println("reseted");
           reset();
           repaint();
        }
        
    }//GEN-LAST:event_verticalActionPerformed

    private void blurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blurActionPerformed
        // TODO add your handling code here:
       if(blur.isSelected()){
        Kernel k = new Kernel(3,3,new float[]{1f/(4*4),1f/(3*3),1f/(3*3),
                                              1f/(3*3),1f/(3*3),1f/(3*3),
                                              1f/(3*3),1f/(3*3),1f/(3*3),
                                              1f/(3*3),1f/(3*3),1f/(3*3)});
        
        ConvolveOp cv = new ConvolveOp(k);
        BufferedImage filter = cv.filter(img, null);
        img = filter;
        repaint();
        }else{
            reset();
            repaint();
        } 
             
        
    }//GEN-LAST:event_blurActionPerformed

    private void green1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_green1StateChanged
        // TODO add your handling code here:
    
    for(int x=0;x<img.getWidth();x++){
            for(int y=0;y<img.getHeight();y++){
                int pixel = img2.getRGB(x, y);
                 Color color = new Color(pixel, true);
            
                int red = color.getRed();
                int green = color.getGreen();
                int blue = color.getBlue();
            
                green = green1.getValue();

            
                color = new Color(red, green, blue);
            
             img.setRGB(x, y, color.getRGB());
            }
        }
        repaint();;
    }//GEN-LAST:event_green1StateChanged

    private void red1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_red1StateChanged
        // TODO add your handling code here:
        
     for(int x=0;x<img.getWidth();x++){
            for(int y=0;y<img.getHeight();y++){
                int pixel = img2.getRGB(x, y);
                 Color color = new Color(pixel, true);
            
                int red = color.getRed();
                int green = color.getGreen();
                int blue = color.getBlue();
            
                red = red1.getValue();

            
                color = new Color(red, green, blue);
            
             img.setRGB(x, y, color.getRGB());
            }
        }
        repaint();;
        
        
    }//GEN-LAST:event_red1StateChanged

    private void blue1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_blue1StateChanged

        // TODO add your handling code here:
        
        for(int x=0;x<img.getWidth();x++){
            for(int y=0;y<img.getHeight();y++){
                int pixel = img2.getRGB(x, y);
                 Color color = new Color(pixel, true);
            
                int red = color.getRed();
                int green = color.getGreen();
                int blue = color.getBlue();
           
                blue = blue1.getValue();

            
                color = new Color(red, green, blue);
            
             img.setRGB(x, y, color.getRGB());
            }
        }
        repaint();
        
    }//GEN-LAST:event_blue1StateChanged

    private void gbrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gbrActionPerformed
        // TODO add your handling code here:
        Graphics2D g = (Graphics2D) this.getGraphics() ;
        repaint();
        syntImg3(g);
    }//GEN-LAST:event_gbrActionPerformed

    private void bgrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bgrActionPerformed
        // TODO add your handling code here:
        Graphics2D g = (Graphics2D) this.getGraphics() ;
        repaint();
        syntImg7(g);
    }//GEN-LAST:event_bgrActionPerformed

    private void grbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grbActionPerformed
        // TODO add your handling code here:
        Graphics2D g = (Graphics2D) this.getGraphics() ;
        repaint();
        syntImg5(g);
    }//GEN-LAST:event_grbActionPerformed

    private void rbgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbgActionPerformed
        // TODO add your handling code here:
        Graphics2D g = (Graphics2D) this.getGraphics() ;
        repaint();
        syntImg4(g);
    }//GEN-LAST:event_rbgActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        // TODO add your handling code here:
     reset();
    }//GEN-LAST:event_resetActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }
    
    private void syntImg2(Graphics2D g2) {
       for (int x = 0;x<img.getWidth();++x){
           for (int y = 0; y<img.getHeight();++y){
               
                int pixel = img.getRGB(x, y);
                int red = (pixel>>16) & 0x0ff;
                int green = (pixel>>8) & 0x0ff;
                int blue = (pixel) & 0x0ff;
                int col = (red + blue + green)/3;
                col = (col>150)?255 : 0;
                img.setRGB(x, y,new Color(col,col,col).getRGB());
                
                

           }
       }
    }
     private void syntImg(Graphics2D g) {
       for (int x = 0;x<img.getWidth();++x){
           for (int y = 0; y<img.getHeight();++y){
               
                int pixel = img.getRGB(x, y);
                int red = (pixel>>16) & 0x0ff;
                int green = (pixel>>8) & 0x0ff;
                int blue = (pixel) & 0x0ff;
                int col = (red + blue + green)/3;
                
                img.setRGB(x, y,new Color(col,col,col).getRGB());
                
                

           }
       }
    }
    private void syntImg3(Graphics2D g) {
       for (int x = 0;x<img.getWidth();++x){
           for (int y = 0; y<img.getHeight();++y){
               
                int pixel = img.getRGB(x, y);
                int red = (pixel>>16) & 0x0ff;
                int green = (pixel>>8) & 0x0ff;
                int blue = (pixel) & 0x0ff;
                int col = (red + blue + green)/3;
                
                img.setRGB(x, y,new Color(green,blue,red).getRGB());
                
                

           }
       }
    }
    private void syntImg4(Graphics2D g) {
       for (int x = 0;x<img.getWidth();++x){
           for (int y = 0; y<img.getHeight();++y){
               
                int pixel = img.getRGB(x, y);
                int red = (pixel>>16) & 0x0ff;
                int green = (pixel>>8) & 0x0ff;
                int blue = (pixel) & 0x0ff;
                int col = (red + blue + green)/3;
                
                img.setRGB(x, y,new Color(red,blue,green).getRGB());
                
                

           }
       }
    }
    private void syntImg5(Graphics2D g) {
       for (int x = 0;x<img.getWidth();++x){
           for (int y = 0; y<img.getHeight();++y){
               
                int pixel = img.getRGB(x, y);
                int red = (pixel>>16) & 0x0ff;
                int green = (pixel>>8) & 0x0ff;
                int blue = (pixel) & 0x0ff;
                int col = (red + blue + green)/3;
                
                img.setRGB(x, y,new Color(green,red,blue).getRGB());
                
                

           }
       }
    }
    private void syntImg6(Graphics2D g) {
       for (int x = 0;x<img.getWidth();++x){
           for (int y = 0; y<img.getHeight();++y){
               
                int pixel = img.getRGB(x, y);
                int red = (pixel>>16) & 0x0ff;
                int green = (pixel>>8) & 0x0ff;
                int blue = (pixel) & 0x0ff;
                int col = (red + blue + green)/3;
                
                img.setRGB(x, y,new Color(red,green,blue).getRGB());
                
                

           }
       }
    }    
    private void syntImg7(Graphics2D g) {
       for (int x = 0;x<img.getWidth();++x){
           for (int y = 0; y<img.getHeight();++y){
               
                int pixel = img.getRGB(x, y);
                int red = (pixel>>16) & 0x0ff;
                int green = (pixel>>8) & 0x0ff;
                int blue = (pixel) & 0x0ff;
                int col = (red + blue + green)/3;
                
                img.setRGB(x, y,new Color(blue,green,red).getRGB());
                
                

           }
       }
    }
     private void syntImg8(Graphics2D g) {
       for (int x = 0;x<img.getWidth();++x){
           for (int y = 0; y<img.getHeight();++y){
               
                int pixel = img.getRGB(x, y);
                int red = (pixel>>16) & 0x0ff;
                int green = (pixel>>8) & 0x0ff;
                int blue = (pixel) & 0x0ff;
                int col = (red + blue + green)/3;
                
                img.setRGB(x, y,new Color(blue,red,green).getRGB());
                
                

           }
       }
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider Brightness;
    private javax.swing.JMenu File;
    private javax.swing.JMenuItem Open;
    private javax.swing.JMenuItem Saveas;
    private javax.swing.JRadioButton bgr;
    private javax.swing.JSlider blue1;
    private javax.swing.JCheckBox blur;
    private javax.swing.JRadioButton brg;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancel;
    private javax.swing.JCheckBox dimmer;
    private javax.swing.JMenu edit;
    private javax.swing.JRadioButton gbr;
    private javax.swing.JCheckBox grayscale;
    private javax.swing.JRadioButton grb;
    private javax.swing.JSlider green1;
    private javax.swing.JCheckBox horizontal;
    private javax.swing.JPanel imageView;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JCheckBox monochrom;
    private javax.swing.JRadioButton rbg;
    private javax.swing.JSlider red1;
    private javax.swing.JButton reset;
    private javax.swing.JRadioButton rgb;
    private javax.swing.JButton save;
    private javax.swing.JCheckBox swapChannel;
    private javax.swing.JCheckBox vertical;
    // End of variables declaration//GEN-END:variables

    
}
